/*
Example
Input:
6 4
1 2 10
2 3 10
1 3 100
4 5 -10
Output:
0 10 20 30000 30000 30000
*/



#include <iostream>
#include <vector>

constexpr int kVertex = 101;  // максимальное количество вершин
constexpr int kLength = 30000;  // расстояние, которое мы будем выводить, если нет пути между двумя данными вершинами

int dp[kVertex][kVertex];

void Floyd(int number_of_vertex) {
  for (int k = 1; k <= number_of_vertex; ++k) {
    for (int i = 1; i <= number_of_vertex; ++i) {
      for (int j = 1; j <= number_of_vertex; ++j) {
        if (dp[i][k] != kLength && dp[k][j] != kLength) {
          dp[i][j] = std::min(dp[i][j], dp[i][k] + dp[k][j]);
        }
      }
    }
  }
}

int main() {
  int number_of_vertex, number_of_edges;
  std::cin >> number_of_vertex >> number_of_edges;
  for (int i = 1; i <= number_of_vertex; ++i) {
    for (int j = 1; j <= number_of_vertex; ++j) {
      if (i == j) {
        dp[i][j] = 0;
      } else {
        dp[i][j] = kLength;
      }
    }
  }
  for (int i = 0; i < number_of_edges; ++i) {
    int start_vertex, finish_vertex, weight;
    std::cin >> start_vertex >> finish_vertex >> weight;
    if (dp[start_vertex][finish_vertex] > weight) {
      dp[start_vertex][finish_vertex] = weight;  // избегаем кратных ребер
    }
  }
  int vertex = 1;  // вершина, от которой мы будем считывать расстояние до всех оставшихся
  Floyd(number_of_vertex);
  for (int i = 1; i <= number_of_vertex; ++i) {
    std::cout << dp[vertex][i] << " ";
  }
}
